{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"RemIO Introducci\u00f3n RemIO es un m\u00f3dulo de python destinado al desarrollo de dispositivos IoT, basados en comunicaci\u00f3n serial , comunicaci\u00f3n socketIO y procesamiento de im\u00e1genes, que permite integrar hardware y software vario, con interfaces gr\u00e1ficas , control remoto y transmisi\u00f3n de video , empleando para ello, librer\u00edas tan comunes como: OpenCV PySerial SocketIO Arquitectura En el presente contexto, este software pretende agilizar la producci\u00f3n de dispositvos electr\u00f3nicos cuya arquitectura sea afin a la siguiente propuesta: Figura. Arquitectura propuesta para el uso de la librer\u00eda `COMPUTADOR` : Se encarga de manejar la complejidad que pueda acarrear un cierto proyecto, como pueden ser sus algoritmos de procesamiento, o la comunicaci\u00f3n con servidores en internet. `MICROCONTROLADOR` : Interact\u00faa con dipositivos de control, como pueden ser actuadores. `INTERFAZ GR\u00c1FICA` : Es un apartado visual que se puede desarrollar con varios frameworks como son PyQt5, Tkinter, Kivy. `PERIF\u00c9RICOS` : Son diversos dispositivos que se pueden conectar directamente al computador. `SERVIDORES` : Para el manejo de comunicaci\u00f3n entre diferentes clientes. Esta distribuci\u00f3n de componentes es pr\u00e1ctica para el desarrollo de prototipos que demandan cierta complejidad de procesamiento, como puede ser el caso de un robot , un algoritmo de IA y cualquier otra posibilidad que este al alcance de esta combinaci\u00f3n. Caracteristicas Las principales caracteristicas del software son: Manejo de m\u00faltiples c\u00e1maras a trav\u00e9s de hilos. Uso de callbacks y eventos. API para incluir funciones de procesamiento de video. Manejo de m\u00faltiples dispositivos seriales a trav\u00e9s de hilos. Manejo s\u00edncrono y as\u00edncrono de SocketIO. Transmisi\u00f3n de video MJPEG a trav\u00e9s de SocketIO. Instalaci\u00f3n 1.- Cree un entorno virutal: python3 -m venv venv 2.- Active el entorno virtual: source venv/bin/activate 3.- Clone el repositorio e instale el paquete: git clone https://github.com/Hikki12/remio && cd remio pip install -U . Primeros Pasos Realizada la instalaci\u00f3n del presente m\u00f3dulo, te sugerimos revisar alguno de los siguientes apartados: Ejemplos","title":"Home"},{"location":"#introduccion","text":"RemIO es un m\u00f3dulo de python destinado al desarrollo de dispositivos IoT, basados en comunicaci\u00f3n serial , comunicaci\u00f3n socketIO y procesamiento de im\u00e1genes, que permite integrar hardware y software vario, con interfaces gr\u00e1ficas , control remoto y transmisi\u00f3n de video , empleando para ello, librer\u00edas tan comunes como: OpenCV PySerial SocketIO","title":"Introducci\u00f3n"},{"location":"#arquitectura","text":"En el presente contexto, este software pretende agilizar la producci\u00f3n de dispositvos electr\u00f3nicos cuya arquitectura sea afin a la siguiente propuesta: Figura. Arquitectura propuesta para el uso de la librer\u00eda `COMPUTADOR` : Se encarga de manejar la complejidad que pueda acarrear un cierto proyecto, como pueden ser sus algoritmos de procesamiento, o la comunicaci\u00f3n con servidores en internet. `MICROCONTROLADOR` : Interact\u00faa con dipositivos de control, como pueden ser actuadores. `INTERFAZ GR\u00c1FICA` : Es un apartado visual que se puede desarrollar con varios frameworks como son PyQt5, Tkinter, Kivy. `PERIF\u00c9RICOS` : Son diversos dispositivos que se pueden conectar directamente al computador. `SERVIDORES` : Para el manejo de comunicaci\u00f3n entre diferentes clientes. Esta distribuci\u00f3n de componentes es pr\u00e1ctica para el desarrollo de prototipos que demandan cierta complejidad de procesamiento, como puede ser el caso de un robot , un algoritmo de IA y cualquier otra posibilidad que este al alcance de esta combinaci\u00f3n.","title":"Arquitectura"},{"location":"#caracteristicas","text":"Las principales caracteristicas del software son: Manejo de m\u00faltiples c\u00e1maras a trav\u00e9s de hilos. Uso de callbacks y eventos. API para incluir funciones de procesamiento de video. Manejo de m\u00faltiples dispositivos seriales a trav\u00e9s de hilos. Manejo s\u00edncrono y as\u00edncrono de SocketIO. Transmisi\u00f3n de video MJPEG a trav\u00e9s de SocketIO.","title":"Caracteristicas"},{"location":"#instalacion","text":"1.- Cree un entorno virutal: python3 -m venv venv 2.- Active el entorno virtual: source venv/bin/activate 3.- Clone el repositorio e instale el paquete: git clone https://github.com/Hikki12/remio && cd remio pip install -U .","title":"Instalaci\u00f3n"},{"location":"#primeros-pasos","text":"Realizada la instalaci\u00f3n del presente m\u00f3dulo, te sugerimos revisar alguno de los siguientes apartados: Ejemplos","title":"Primeros Pasos"},{"location":"camera/","text":"Camera module","title":"Camera"},{"location":"examples/","text":"","title":"Examples"},{"location":"mockup/","text":"El presente m\u00f3dulo se encarga de administrar las diversas herramientas que posibilitan el funcionamiento de un experimento. import numpy as np","title":"Mockup"},{"location":"serial/","text":"Single Serial device Single. Multiple Serial devices Multiple.","title":"Serial"},{"location":"serial/#single-serial-device","text":"Single.","title":"Single Serial device"},{"location":"serial/#multiple-serial-devices","text":"Multiple.","title":"Multiple Serial devices"},{"location":"settings/","text":"","title":"Settings"},{"location":"socketio/","text":"","title":"Socketio"}]}